// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RobotCloudService.Remotes.Infrastructure.Persistence;

#nullable disable

namespace RobotCloudService.Remotes.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RemoteDbContext))]
    [Migration("20240829184903_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("remotes")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RobotCloudService.Remotes.Application.Users.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.ToTable("users", "remotes");
                });

            modelBuilder.Entity("RobotCloudService.Remotes.Application.Users.User", b =>
                {
                    b.OwnsMany("RobotCloudService.Remotes.Application.Users.Entities.Log", "Logs", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("text")
                                .HasColumnName("user_id");

                            b1.Property<string>("LogId")
                                .HasColumnType("text")
                                .HasColumnName("log_id");

                            b1.Property<string>("Message")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("message");

                            b1.Property<DateTime>("OccuredAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("occured_at");

                            b1.HasKey("UserId", "LogId")
                                .HasName("pk_logs");

                            b1.ToTable("logs", "remotes");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("RobotCloudService.Remotes.Application.Users.Entities.Robot", "Robots", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("text")
                                .HasColumnName("user_id");

                            b1.Property<string>("RobotId")
                                .HasColumnType("text")
                                .HasColumnName("robot_id");

                            b1.Property<DateTime>("CalculatedTimeOfClaningOver")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("model");

                            b1.Property<string>("RobotState")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("state");

                            b1.Property<string>("RoomId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("room_id");

                            b1.Property<double>("Speed")
                                .HasMaxLength(100)
                                .HasColumnType("double precision")
                                .HasColumnName("speed");

                            b1.HasKey("UserId", "RobotId")
                                .HasName("pk_robots");

                            b1.ToTable("robots", "remotes");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("RobotCloudService.Remotes.Application.Users.Entities.Room", "Rooms", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("text")
                                .HasColumnName("user_id");

                            b1.Property<string>("RoomId")
                                .HasColumnType("text")
                                .HasColumnName("room_id");

                            b1.Property<DateTime>("LastCleanedAt")
                                .HasMaxLength(100)
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("last_cleaned_at");

                            b1.Property<double>("Square")
                                .HasMaxLength(100)
                                .HasColumnType("double precision")
                                .HasColumnName("square");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("title");

                            b1.HasKey("UserId", "RoomId")
                                .HasName("pk_rooms");

                            b1.ToTable("rooms", "remotes");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Logs");

                    b.Navigation("Robots");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
