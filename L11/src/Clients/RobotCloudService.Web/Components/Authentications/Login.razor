
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto" OnClick="ForgotPassword">Forgot Password</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @if (!_isValid)
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                </MudPaper>
            </MudItem>
        }

    </MudGrid>
</EditForm>


@code {
    [Inject] IAuthenticationService AuthenticationService { get; set; } = null!;
    [Inject] Authentication.StateProvider StateProvider { get; set; } = null!;
    [Inject] NavigationManager NavigationManager { get; set; } = null!;
    private LoginAccountModel model = new LoginAccountModel();
    private bool _isValid = true;



    private async Task OnValidSubmit(EditContext context)
    {
        _isValid = true;
        StateHasChanged();
        var result = await AuthenticationService.Login(model);
        Console.WriteLine(result);
        if(result is not null)
        {
            await StateProvider.NotifyUserLogIn(result);
            NavigationManager.NavigateTo("/");
        }        
    }

    private void ForgotPassword()
    {
        NavigationManager.NavigateTo("/forgot-password");
    }
}
